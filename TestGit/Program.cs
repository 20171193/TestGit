/************************************************************************************************************************************
 * <git>
    * config = git의 사용환경 설정 (전역설정/리포지토리 설정 등)
              *리포지토리 설정이 전역설정보다 먼저 적용됨.
             
    * init = 버전 관리를 시작하기 위한 git 저장소를 생성
    * stage = 변경사항 올리기
    * commit = 변경사항을 버전에 기록하기
    * diff = 변경과 현재사항 확인
    * stash = 기록되지 않은 내용을 임시저장소에 잠시 보관
    * restore = 변경내용 취소 (원복)
    * revert = 변경 내용을 반대로 (되돌리기) 
    * reset = 선택한 항목의 상위항목(선택한 항목보다 최근의 항목)을 삭제 (hard:기록과 파일 모두 삭제, mixed:기록은 삭제 / 파일은 유지)
************************************************************************************************************************************/

/************************************************************************************************************************************
 
 * <git-hub> 원격 저장소
    * push : 로컬 Git 저장소의 기록한 변경내용을 GitHub에 업로드
    * fetch : GitHub 원격저장소의 변경사항이 있는지 확인하기 위해 새로고침을 시도
    * pull : GitHub 원격저장소의 변경사항을 로컬 Git 저장소에 끌어와 적용
    * clone : GitHub 원격저장소의 프로젝트를 복사하여 로컬 Git 저장소를 생성
    * fork : 다른 사람의 GitHub 원격저장소의 프로젝트를 복사하여 자신의 GitHub 원격저장소를 생성
    * pull request : 작업분기에 작성한 내용을 repository 중요 분기에 적용하는 것을 구성원들에게 요청
    * code convention : 작업분기에 작성한 애용을 repository 중요 분기에 적용하는 것을 구성원들과 결정하는 과정

************************************************************************************************************************************/


/************************************************************************************************************************************
 
 * <공동 작업>
  * branch : 분기 
  * checkout : 해당 분기로 이동
  * merge : 분기들 병합
  * rebase : merge보다 가독성이 좋은 방식 ()
  * conflict : 같은 공간에서 작업한 내용을 병합한 경우 발생할 수 있는 충돌 (병합 편집기에서 수정 후 해결)
************************************************************************************************************************************/


namespace TestGit
{
    public class Player
    {
        public int hp;
        public void Attack() { Console.WriteLine("공격합니다."); }
    }

    public class Monster
    {
        public int hp;
        public void TakeDamage(Player owner) { }
    }
    public class Skill
    {
        // stash 후 작업
    }

    public class Item
    {
        // 작업도중 stash
    }

    class Program
    {
        static void Main(string[] argc)
        {
            Console.WriteLine("플레이어와 몬스터다.");
        }
    }
}